from typing import List, Dict
from g4f.client import Client


def generate_outfit_recommendations(
        event_type: str, gender: str, body_shape: str, skin_color_code: str
) -> Dict[str, List[Dict[str, str]]]:
    """
    Generates outfit recommendations with colors dynamically selected based on the skin color code.

    Args:
        event_type (str): The type of event (e.g., party, wedding, formal).
        gender (str): The gender of the user (e.g., male, female).
        body_shape (str): The user's body shape (e.g., hourglass, pear).
        skin_color_code (str): The user's skin color in hex format (e.g., #F5E1DA).

    Returns:
        Dict[str, List[Dict[str, str]]]: A dictionary containing outfit recommendations with details.
    """
    # Initialize the G4F client
    client = Client()

    # Placeholder dictionary to hold outfit recommendations
    outfit_recommendations = {}

    # Step 1: Generate suitable colors for the given skin color
    color_prompt = f"""
    Based on a user with skin color code {skin_color_code}, suggest four color options for outfits that would complement the skin tone.
    Provide the colors as names or hex codes.
    """
    try:
        color_response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": color_prompt}]
        )
        colors = color_response.choices[0].message.content.strip().split("\n")

        # Ensure valid colors are retrieved
        colors = [color.strip() for color in colors if color.strip()]
        if len(colors) < 1:
            raise ValueError("No colors were generated by the API.")

    except Exception as e:
        print(f"Error generating suitable colors: {e}")
        return {"error": "Could not generate colors dynamically."}

    # Step 2: Generate outfits based on the selected colors
    base_prompt = f"""
        You are a professional fashion stylist. Recommend five different outfits based on the following:
        Event: {event_type}
        Gender: {gender}
        Body Shape: {body_shape}
        Skin Color Code: {skin_color_code}
        For each outfit, provide:
        - Outfit Style
        - Description
    """

    try:
        # Generate outfits for the given event
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": base_prompt}]
        )

        # Parse the outfit descriptions from the response
        outfits = response.choices[0].message.content.strip().split("\n")

        outfit_data = []

        for outfit in outfits:
            if outfit.strip():  # Ensure the outfit is not empty
                outfit_entry = {"outfit_style": outfit.strip(), "color_variations": []}

                for color in colors:
                    # Generate a prompt for color-specific details
                    color_prompt = f"""
                    Based on the following outfit:
                    {outfit}
                    Provide details for the color {color} considering a skin color code of {skin_color_code}:
                    - Outfit Style
                    - Accessories
                    - Makeup
                    - Hair Styling
                    - **Image Generation Prompt**: "A full-body view of a {color} outfit suitable for a {event_type}. 
                    The model should have {body_shape}, skin color code {skin_color_code}, and the outfit should include appropriate accessories. The model should be {gender}."
                    """

                    try:
                        # Call the API to generate color-specific details
                        color_response = client.chat.completions.create(
                            model="gpt-4o-mini",
                            messages=[{"role": "user", "content": color_prompt}]
                        )
                        color_details = color_response.choices[0].message.content.strip()

                        # Add the color details to the outfit entry
                        outfit_entry["color_variations"].append({
                            "color": color,
                            "details": color_details
                        })

                    except Exception as e:
                        # Handle errors for specific color prompts
                        print(f"Error generating color details for {color}: {e}")

                # Add the outfit entry to the outfit data
                outfit_data.append(outfit_entry)

        # Store the outfits under the event type
        outfit_recommendations[event_type] = outfit_data

    except Exception as e:
        # Handle errors for the overall process
        print(f"Error generating outfit recommendations: {e}")

    return outfit_recommendations


    # Example usage
        # Example inputs
event_type = "party"  # Type of event
gender = "female"  # Gender of the user
body_shape = "hourglass"  # Body shape
skin_color_code = "#F5E1DA"  # Skin color in hex format

        # Generate recommendations
recommendations = generate_outfit_recommendations(event_type, gender, body_shape, skin_color_code)
# Example usage with debugging
if __name__ == "__main__":
    event_type = "party"  # Type of event
    gender = "female"  # Gender of the user
    body_shape = "hourglass"  # Body shape
    skin_color_code = "#F5E1DA"  # Skin color in hex format

    try:
        recommendations = generate_outfit_recommendations(event_type, gender, body_shape, skin_color_code)

        if not recommendations:
            print("No recommendations were generated. Please check the API responses.")
        else:
            for event, outfits in recommendations.items():
                print(f"\nEvent: {event.capitalize()}")
                for idx, outfit in enumerate(outfits, 1):
                    print(f"\nOutfit {idx}:")
                    print(f"  Style: {outfit['outfit_style']}")
                    for color_variation in outfit["color_variations"]:
                        print(f"    {color_variation['color']} Details: {color_variation['details']}")
    except Exception as e:
        print(f"Error: {e}")


